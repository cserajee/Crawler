substitutions:
  _IMAGE_NAME: crawler
  _SERVICE_NAME: crawler
  _GCS_CACHE_BUCKET: ${PROJECT_ID}-m2-cache
  _REPOSITORY: sb-docker-repo
  _VERSION: 1.0.0

steps:

# load the cache from GCS if it exists
- name: gcr.io/cloud-builders/gsutil
  dir: /root
  entrypoint: bash
  args:
  - -c
  - |
    (
      whoami &&
      gsutil cp gs://${_GCS_CACHE_BUCKET}/${_SERVICE_NAME}-m2-cache.tar.gz /tmp/m2-cache.tar.gz &&
      tar -xzf /tmp/m2-cache.tar.gz
    ) || echo 'Cache not found'
  volumes:
  - name: m2
    path: /root/.m2/

# execute the unit test cases
- name: maven:3-openjdk-11
  entrypoint: mvn
  args: ["test"]
  volumes:
  - name: m2
    path: /root/.m2/

#package the jar excluding the tests
- name: maven:3-openjdk-11
  entrypoint: bash
  args:
  - -c
  - |
     if [[ "${BRANCH_NAME}" == feature* ]]; then
       echo "APP_VERSION=${_VERSION}-SNAPSHOT" > /workspace/version.sh 
       mvn versions:set -DnewVersion=${_VERSION}-SNAPSHOT
       mvn package -D maven.test.skip=true 
     elif [[ "${BRANCH_NAME}" == develop* ]]; then
       echo "APP_VERSION=${_VERSION}-SNAPSHOT" > /workspace/version.sh 
       mvn versions:set -DnewVersion=${_VERSION}-SNAPSHOT
       mvn package -D maven.test.skip=true 
     elif [[ "${BRANCH_NAME}" == release* ]]; then
       echo "APP_VERSION=${_VERSION}-RC1" > /workspace/version.sh 
       mvn versions:set -DnewVersion=${_VERSION}-RC1
       mvn package -D maven.test.skip=true versions:use-releases 
     elif [[ "${BRANCH_NAME}" == master ]]; then
       echo "APP_VERSION=${_VERSION}-RELEASE" > /workspace/version.sh 
       mvn versions:set -DnewVersion=${_VERSION}-RELEASE
       mvn package -D maven.test.skip=true versions:use-releases  
     fi
  volumes:
  - name: m2
    path: /root/.m2/

#build the docker container and push to the docker repo
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args: 
  - -c
  - |
    source /workspace/version.sh
    docker build -t us-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$${APP_VERSION} --build-arg JAR_FILE=target/${_SERVICE_NAME}-$${APP_VERSION}.jar .
# Push the container image to docker Registry
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: bash
  args:
  - -c
  - |
    source /workspace/version.sh
    docker push us-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$${APP_VERSION}
  # cache the /root/.m2 folder and upload it to GCS bucket
- name: gcr.io/cloud-builders/gsutil
  dir: /root
  entrypoint: bash
  args:
  - -c
  - |
    tar -czf /tmp/m2-cache.tar.gz .m2 &&
    gsutil cp /tmp/m2-cache.tar.gz gs://${_GCS_CACHE_BUCKET}/${_SERVICE_NAME}-m2-cache.tar.gz
  volumes:
  - name: m2
    path: /root/.m2/

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
  - -c
  - |
    source /workspace/version.sh
    echo ${BRANCH_NAME}
    if [[ "${BRANCH_NAME}" == master ]]; then
      echo "deploying the feature version of the build with prefix of branch name"
      gcloud run deploy ${BRANCH_NAME}-${_SERVICE_NAME} --image us-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$${APP_VERSION} --memory=2Gi --cpu=1 --platform=managed --region=us-central1 --service-account=gcpaccount@springboot-311207.iam.gserviceaccount.com --set-env-vars=SPRING_PROFILES_ACTIVE=cloud,JAVA_TOOL_OPTIONS="-Xmx1536M -Xms1536M"
    fi
#images:
#- 'us-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${_VERSION}'
